const { BaseActionProcessor } = require('scenarium/dist/actions/BaseAction');

/**
 * –ö–∞—Å—Ç–æ–º–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
class CalculatorAction extends BaseActionProcessor {
  get actionType() { return 'Calculate'; }

  async process(action, context) {
    // Create interpolation context for this action
    const interpolationContext = this.createInterpolationContext(context);
    
    // Create local scope for action-specific variables
    interpolationContext.local.createScope();
    
    try {
      // Interpolate the action with current context
      const interpolatedAction = this.interpolate(action, interpolationContext);
      const { expression, operation, a, b, saveTo } = interpolatedAction;
      
      let result;
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
      switch (operation) {
        case 'add':
          result = a + b;
          break;
        case 'subtract':
          result = a - b;
          break;
        case 'multiply':
          result = a * b;
          break;
        case 'divide':
          if (b === 0) {
            throw new Error('Division by zero is not allowed');
          }
          result = a / b;
          break;
        case 'power':
          result = Math.pow(a, b);
          break;
        case 'sqrt':
          if (a < 0) {
            throw new Error('Square root of negative number is not allowed');
          }
          result = Math.sqrt(a);
          break;
        case 'expression':
          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
          result = this.evaluateExpression(expression);
          break;
        default:
          throw new Error(`Unknown operation: ${operation}`);
      }
      
      // –û–∫—Ä—É–≥–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
      result = Math.round(result * 100) / 100;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (saveTo) {
        context.userContext.data[saveTo] = result;
        context.userContext.data[`${saveTo}_timestamp`] = new Date().toISOString();
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      context.userContext.data.lastCalculation = {
        operation: operation,
        a: a,
        b: b,
        result: result,
        timestamp: new Date().toISOString()
      };
      
      console.log(`üßÆ Calculation: ${a} ${operation} ${b} = ${result}`);
      this.updateUserActivity(context);
      
    } finally {
      interpolationContext.local.clearScope();
    }
  }
  
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
   */
  evaluateExpression(expression) {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–∫–æ–±–æ–∫
    const sanitized = expression.replace(/[^0-9+\-*/().\s]/g, '');
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Function –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
      return Function(`"use strict"; return (${sanitized})`)();
    } catch (error) {
      throw new Error(`Invalid expression: ${expression}`);
    }
  }
}

module.exports = { CalculatorAction };
