import TelegramBot from 'node-telegram-bot-api';
import { TelegramService } from './TelegramService';
import { ActionMappingService } from '../telegram/ActionMappingService';
import { InputManager } from '../core/InputManager';
import { TelegramBotConstructor } from '../assembly/TelegramBotConstructor';
import { ActionRegistry } from '../registry/ActionRegistry';

export class TelegramAdapter {
  private bot: TelegramBot;
  private botConstructor: TelegramBotConstructor;
  private botName: string;

  constructor(token: string, botConstructor: TelegramBotConstructor, botName: string = 'default') {
    this.bot = new TelegramBot(token, { polling: true });
    this.botConstructor = botConstructor;
    this.botName = botName;
    
    this.setupHandlers();
  }

  private setupHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
      const userId = msg.chat.id.toString();
      const startPayload = match?.[1]; // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ /start

      try {
        await this.handleStartCommand(userId, startPayload, msg);
      } catch (error) {
        console.error('Error handling /start command:', error);
        this.sendSafeMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
    this.bot.onText(/\/menu/, async (msg) => {
      const userId = msg.chat.id.toString();

      try {
        await this.handleMenuCommand(userId, msg);
      } catch (error) {
        console.error('Error handling /menu command:', error);
        this.sendSafeMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    this.bot.onText(/\/help/, async (msg) => {
      const userId = msg.chat.id.toString();

      try {
        await this.handleHelpCommand(userId, msg);
      } catch (error) {
        console.error('Error handling /help command:', error);
        this.sendSafeMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–º–æ—â–∏');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (msg) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã onText
      if (msg.text?.startsWith('/')) {
        return;
      }

      const userId = msg.chat.id.toString();
      const text = msg.text || '';

      try {
        await this.handleUserMessage(userId, text, msg);
      } catch (error) {
        console.error('Error handling message:', error);
        this.sendSafeMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (JSON —Ñ–∞–π–ª—ã)
    this.bot.on('document', async (msg) => {
      const userId = msg.chat.id.toString();
      
      try {
        await this.handleDocument(userId, msg);
      } catch (error) {
        console.error('Error handling document:', error);
        this.sendSafeMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query (–¥–ª—è inline –∫–Ω–æ–ø–æ–∫)
    this.bot.on('callback_query', async (query) => {
      if (!query.message) {
        console.error('Invalid callback query: no message', query);
        return;
      }

      const userId = query.message.chat.id.toString();
      const data = query.data;

      if (userId && data) {
        try {
          await this.handleCallbackQuery(userId, data, query);
        } catch (error) {
          console.error('Error handling callback query:', error);
          this.sendSafeMessage(query.message.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è');
        }
      } else {
        console.error('Invalid callback query:', query);
      }

      // –û—Ç–≤–µ—Ç –Ω–∞ callback query
      this.bot.answerCallbackQuery(query.id).catch(console.error);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ polling
    this.bot.on('polling_error', (error) => {
      console.error('Telegram Polling Error:', error);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      console.error('Telegram Bot Error:', error);
    });

    console.log('‚úÖ Telegram bot handlers configured');
  }

  private async handleStartCommand(userId: string, startPayload: string | undefined, msg: any): Promise<void> {
    console.log(`üöÄ User ${userId} started bot`);
    
    const botInstance = this.botConstructor;
    
    // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ - –æ–Ω–∏ –≤—Å–µ –ø–æ–π–¥—É—Ç –≤ data
    this.botConstructor.updateUserContext(userId, {
      telegramData: {
        chatId: msg.chat.id,
        firstName: msg.chat.first_name,
        lastName: msg.chat.last_name,
        username: msg.chat.username,
        type: msg.chat.type
      },
      startPayload: startPayload,
      startTime: new Date().toISOString()
    });
  
    // –ó–∞–ø—É—Å–∫–∞–µ–º onStartActions –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.botConstructor.startForUser(userId);
  }

  private async handleMenuCommand(userId: string, msg: any): Promise<void> {
    console.log(`üìã User ${userId} requested menu`);
    
    const botInstance = this.botConstructor;
    
    // –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º start actions –≤–º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–Ω—é
    // –≠—Ç–æ –Ω–∞–¥–µ–∂–Ω–µ–µ –∏ –ø—Ä–æ—â–µ
    try {
      await this.botConstructor.startForUser(userId);
      console.log(`‚úÖ Restarted from beginning for user ${userId}`);
    } catch (error) {
      console.error('Error restarting from menu command:', error);
      this.sendSafeMessage(msg.chat.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é');
    }
  }

  private async handleHelpCommand(userId: string, msg: any): Promise<void> {
    console.log(`‚ùì User ${userId} requested help`);
    
    const botInstance = this.botConstructor;
    
    await this.botConstructor.processUserAction(userId, {
      action: 'Navigate',
      menuItem: 'Help',
      addToBackStack: true
    });
  }

  private async handleDocument(userId: string, msg: any): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤–≤–æ–¥–∞
    const handled = await ActionRegistry.processInput(userId, this.botName, {
      type: 'document',
      data: msg
    });
    
    if (handled) {
      return; // –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–∂–∏–¥–∞—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º
    }

    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const document = msg.document;
    
    if (!document) {
      this.sendSafeMessage(msg.chat.id, '‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ JSON —Ñ–∞–π–ª
    const fileName = document.file_name || '';
    if (!fileName.toLowerCase().endsWith('.json')) {
      this.sendSafeMessage(msg.chat.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª');
      return;
    }

    try {
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const fileLink = await this.bot.getFileLink(document.file_id);
      const response = await fetch(fileLink);
      const jsonContent = await response.text();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.botConstructor.updateUserContext(userId, {
        lastDocument: jsonContent,
        lastDocumentName: fileName
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      this.sendSafeMessage(msg.chat.id, '‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.');

    } catch (error) {
      console.error('Error processing document:', error);
      this.sendSafeMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: ${error}`);
    }
  }

  private async handleUserMessage(userId: string, text: string, msg: any): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤–≤–æ–¥–∞
    const handled = await ActionRegistry.processInput(userId, this.botName, {
      type: 'message',
      data: msg
    });
    
    if (handled) {
      return; // –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–∂–∏–¥–∞—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º
    }

    const botInstance = this.botConstructor;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    this.botConstructor.updateUserContext(userId, {
      lastActivity: new Date().toISOString(),
      lastMessage: text
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userContext = this.botConstructor.getUserContext(userId);
    const awaiting = userContext?.awaitingInput;
    if (awaiting && text.trim()) {
      try {
        const handled = await InputManager.handleUserText(this.botConstructor, userId, text);
        if (handled) return;
      } catch (error) {
        console.error('Error processing awaited input:', error);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    if (text.toLowerCase() === '–º–µ–Ω—é') {
      await this.handleMenuCommand(userId, msg);
      return;
    }

    if (text.toLowerCase() === '–ø–æ–º–æ—â—å' || text.toLowerCase() === 'help') {
      await this.handleHelpCommand(userId, msg);
      return;
    }

    if (text.toLowerCase() === '–Ω–∞–∑–∞–¥' || text.toLowerCase() === 'back') {
      await this.botConstructor.processUserAction(userId, {
        action: 'Back'
      });
      return;
    }

    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    if (text.trim()) {
      this.sendSafeMessage(
        msg.chat.id,
        'ü§ñ –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n' +
        '/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n' +
        '/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n' +
        '/help - –ø–æ–º–æ—â—å\n\n' +
        '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
        { reply_to_message_id: msg.message_id }
      );
    }
  }

  private async handleCallbackQuery(userId: string, data: string, query: any): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤–≤–æ–¥–∞
    const handled = await ActionRegistry.processInput(userId, this.botName, {
      type: 'callback',
      data: query
    });
    
    if (handled) {
      return; // –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–∂–∏–¥–∞—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º
    }

    try {
      console.log('üîç Callback data received:', data);
      
      const actionMappingService = ActionMappingService.getInstance();
      const action = actionMappingService.getAction(data);
      
      if (!action) {
        throw new Error(`Action not found: ${data}. It may have been already used or expired.`);
      }
      
      console.log('‚úÖ Action executed:', action);
      
      // –ï–¥–∏–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã RequestInput
      if (action._requestInputCancel) {
        const botInstance = (this.botConstructor as any).botInstance;
        await InputManager.cancel(botInstance, userId);
        return;
      }
      
      this.botConstructor.updateUserContext(userId, {
        lastActivity: new Date().toISOString(),
        lastAction: action.action
      });
      
      await this.botConstructor.processUserAction(userId, action);
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É
      actionMappingService.markActionCompleted(data);
      
    } catch (error) {
      console.error('Error processing callback query:', error);
      
      if (query.message) {
        this.sendSafeMessage(
          query.message.chat.id, 
          '‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ.'
        );
      }
    }
  }

  private getActionByHash(hash: string): any {
    // –ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ö—ç—à–µ–π
    const actionMap: Record<string, any> = {
      'hash:abc123': { 
        action: 'SendMessage', 
        text: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! üéâ' 
      },
      'hash:def456': { 
        action: 'SendMessage', 
        text: '–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! üíé' 
      }
    };
    
    return actionMap[hash] || { 
      action: 'SendMessage', 
      text: '–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! ‚úÖ' 
    };
  }

  private async sendSafeMessage(chatId: number | string, text: string, options?: any): Promise<void> {
    try {
      await this.bot.sendMessage(chatId.toString(), text, options);
    } catch (error) {
      console.error('Failed to send safe message:', error);
      // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º
      console.log('üì® Message (fallback):', text);
    }
  }

  // cancelAwaitingInput –≤—ã–Ω–µ—Å–µ–Ω –≤ InputManager

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
  async sendMessage(chatId: string, text: string, options?: any): Promise<any> {
    return await this.bot.sendMessage(chatId, text, options);
  }

  async editMessageText(chatId: string, messageId: number, text: string, options?: any): Promise<void> {
    await this.bot.editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
      ...options
    });
  }

  async answerCallbackQuery(queryId: string, options?: any): Promise<void> {
    try {
      await this.bot.answerCallbackQuery(queryId, options);
    } catch (error) {
      console.error('Failed to answer callback query:', error);
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  async deleteMessage(chatId: string, messageId: number): Promise<void> {
    try {
      await this.bot.deleteMessage(chatId, messageId);
      console.log(`‚úÖ Message ${messageId} deleted in chat ${chatId}`);
    } catch (error) {
      console.error(`Failed to delete message ${messageId} in chat ${chatId}:`, error);
      throw error;
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  async stop(): Promise<void> {
    try {
      this.bot.stopPolling();
      console.log('üõë Telegram bot polling stopped');
    } catch (error) {
      console.error('Error stopping bot polling:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
  async getMe(): Promise<any> {
    try {
      return await this.bot.getMe();
    } catch (error) {
      console.error('Failed to get bot info:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
  getBot(): TelegramBot {
    return this.bot;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ setWebHook
  async setWebhook(url: string, options?: any): Promise<void> {
    try {
      await this.bot.setWebHook(url, options);
      console.log(`‚úÖ Webhook set to: ${url}`);
    } catch (error) {
      console.error('Failed to set webhook:', error);
      throw error;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ webhook - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ deleteWebHook
  async deleteWebhook(): Promise<void> {
    try {
      await this.bot.deleteWebHook();
      console.log('‚úÖ Webhook deleted');
    } catch (error) {
      console.error('Failed to delete webhook:', error);
      throw error;
    }
  }
}