import * as fs from 'fs';
import * as path from 'path';
import { Scenario } from '../types';

export interface ScenarioConfig {
  entryPoint?: string; // –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: scenario.json)
  modules?: string[];  // –ú–∞—Å—Å–∏–≤ –ø–∞–ø–æ–∫ —Å –º–æ–¥—É–ª—è–º–∏: ["api", "user", "settings"]
}

export class ScenarioLoader {
  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–∞–ø–∫–∏
   * @param scenarioPath –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .json –∏–ª–∏ –ø–∞–ø–∫–µ —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
   * @returns –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
   */
  static async loadScenario(scenarioPath: string): Promise<Scenario> {
    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenarioPath}`);
    
    try {
      const stats = fs.statSync(scenarioPath);
      console.log(`üìÅ –¢–∏–ø: ${stats.isFile() ? '—Ñ–∞–π–ª' : '–ø–∞–ø–∫–∞'}`);
      
      if (stats.isFile()) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        return this.loadFromFile(scenarioPath);
      } else if (stats.isDirectory()) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–∞–ø–∫–∏
        return this.loadFromDirectory(scenarioPath);
      } else {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é: ${scenarioPath}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è ${scenarioPath}:`, error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –æ–¥–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞
   */
  private static async loadFromFile(filePath: string): Promise<Scenario> {
    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
    
    const content = fs.readFileSync(filePath, 'utf-8');
    const scenario = JSON.parse(content);
    
    this.validateScenario(scenario);
    return scenario;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –ø–∞–ø–∫–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
   */
  private static async loadFromDirectory(dirPath: string): Promise<Scenario> {
    console.log(`üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –ø–∞–ø–∫–∏: ${dirPath}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è
    const config = this.loadScenarioConfig(dirPath);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
    const entryPointPath = path.join(dirPath, config.entryPoint || 'scenario.json');
    const mainScenario = await this.loadFromFile(entryPointPath);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    const additionalComponents = await this.loadAdditionalComponents(dirPath, config);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    const mergedScenario = this.mergeScenarioComponents(mainScenario, additionalComponents);
    
    this.validateScenario(mergedScenario);
    return mergedScenario;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ scenario.config.json
   */
  private static loadScenarioConfig(dirPath: string): ScenarioConfig {
    const configPath = path.join(dirPath, 'scenario.config.json');
    
    if (fs.existsSync(configPath)) {
      console.log(`‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: ${configPath}`);
      const content = fs.readFileSync(configPath, 'utf-8');
      return JSON.parse(content);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
      entryPoint: 'scenario.json',
      modules: ['modules']
    };
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏—è
   */
  private static async loadAdditionalComponents(dirPath: string, config: ScenarioConfig): Promise<Partial<Scenario>> {
    const components: Partial<Scenario> = {
      menuItems: {},
      functions: {}
    };
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –ø–∞–ø–æ–∫
    if (config.modules && Array.isArray(config.modules)) {
      for (const modulePath of config.modules) {
        const fullModulePath = path.join(dirPath, modulePath);
        if (fs.existsSync(fullModulePath)) {
          console.log(`üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –∏–∑: ${fullModulePath}`);
          const moduleData = await this.loadBusinessModules(fullModulePath);
          components.menuItems = { ...components.menuItems, ...moduleData.menuItems };
          components.functions = { ...components.functions, ...moduleData.functions };
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–µ–π –≤ –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
          Object.assign(components, moduleData.data);
        } else {
          console.warn(`‚ö†Ô∏è –ü–∞–ø–∫–∞ –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${fullModulePath}`);
        }
      }
    }
    
    return components;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–º–æ–¥—É–ª–∏ –∏–∑ –ø–∞–ø–∫–∏
   */
  private static async loadBusinessModules(modulesPath: string): Promise<{ menuItems: Record<string, any>, functions: Record<string, any>, data: Record<string, any> }> {
    
    const menuItems: Record<string, any> = {};
    const functions: Record<string, any> = {};
    const data: Record<string, any> = {};
    const files = fs.readdirSync(modulesPath);
    
    for (const file of files) {
      if (file.endsWith('.json')) {
        const filePath = path.join(modulesPath, file);
        const content = fs.readFileSync(filePath, 'utf-8');
        const moduleData = JSON.parse(content);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º menu items –∏–∑ –º–æ–¥—É–ª—è
        if (moduleData.menuItems) {
          Object.assign(menuItems, moduleData.menuItems);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è
        if (moduleData.functions) {
          Object.assign(functions, moduleData.functions);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥—É–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (moduleData.data) {
          Object.assign(data, moduleData.data);
        }
      }
    }
    
    return { menuItems, functions, data };
  }


  /**
   * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏—è
   */
  private static mergeScenarioComponents(mainScenario: Scenario, additionalComponents: Partial<Scenario>): Scenario {
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    const merged = {
      ...mainScenario,
      menuItems: {
        ...mainScenario.menuItems,
        ...additionalComponents.menuItems
      },
      functions: {
        ...mainScenario.functions,
        ...additionalComponents.functions
      }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥—É–ª–µ–π
    const dataKeys = Object.keys(additionalComponents).filter(k => k !== 'menuItems' && k !== 'functions');
    
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const additionalData: Record<string, any> = {};
    for (const key of dataKeys) {
      additionalData[key] = (additionalComponents as any)[key];
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    return Object.assign(merged, additionalData) as Scenario;
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ü–µ–Ω–∞—Ä–∏—è
   */
  private static validateScenario(scenario: any): void {
    if (!scenario.menuItems) {
      throw new Error('–°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å menuItems');
    }
    
    console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –≤–∞–ª–∏–¥–µ–Ω. Menu items: ${Object.keys(scenario.menuItems).length}, Functions: ${Object.keys(scenario.functions || {}).length}`);
  }
}
