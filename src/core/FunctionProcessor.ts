import { FunctionDefinition, ProcessingContext } from '../types';
import { InterpolationContextBuilder, InterpolationSystem } from '../interpolation';
import { FunctionRegistry } from '../registry/FunctionRegistry';
import { ActionProcessor } from './ActionProcessor';

export class FunctionProcessor {
  static async executeUserFunction(
    funcName: string, 
    params: Record<string, any>, 
    context: ProcessingContext,
    existingInterpolationContext?: any
  ): Promise<any> {
    const actionProcessor = context.actionProcessor;
    const scenario = actionProcessor?.getScenario();
    const funcDef = scenario?.functions[funcName];
    
    if (!funcDef) {
      throw new Error(`Function ${funcName} not found`);
    }

    // If function has no params, use empty object
    const paramDefs = funcDef.params || {};
    const resolvedParams = this.resolveParams(paramDefs, params, context, existingInterpolationContext);
    
    // Debug: log context inheritance
    if (existingInterpolationContext) {
      console.log(`üîç Function ${funcName} inheriting context:`, {
        hasExistingContext: !!existingInterpolationContext,
        localScopes: existingInterpolationContext.local?.getAllScopes(),
        params: resolvedParams
      });
    }
    
    return await this.evaluateResult(funcDef.result, resolvedParams, context, 
      existingInterpolationContext || context.interpolationContext);
  }

  private static resolveParams(
    paramDefs: Record<string, any>,
    providedParams: Record<string, any>,
    context: ProcessingContext,
    interpolationContext?: any
  ): Record<string, any> {
    const resolved: Record<string, any> = {};
    
    // Check that paramDefs is not null/undefined
    if (!paramDefs || typeof paramDefs !== 'object') {
      console.warn('‚ö†Ô∏è paramDefs is null/undefined or not an object:', paramDefs);
      return resolved;
    }
    
    for (const [key, defaultValue] of Object.entries(paramDefs)) {
      let value = providedParams[key] !== undefined ? providedParams[key] : defaultValue;
      
      // Interpolate the value if we have interpolation context
      if (interpolationContext && typeof value === 'string') {
        value = InterpolationSystem.interpolateAndClean(value, interpolationContext);
      }
      
      resolved[key] = value;
    }
    
    return resolved;
  }

  private static getValueByPath(obj: any, path: string): any {
    const parts = path.split('.');
    let current = obj;
    
    for (const part of parts) {
      if (current === null || current === undefined) {
        return undefined;
      }
      current = current[part];
    }
    
    return current;
  }

  static async evaluateResult(
    result: any, 
    params: Record<string, any>, 
    context: ProcessingContext,
    existingInterpolationContext?: any
  ): Promise<any> {
    // –ü–†–ò–ù–¶–ò–ü: –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
    let interpolationContext = existingInterpolationContext;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (!interpolationContext || !interpolationContext.local || !interpolationContext.data) {
      console.log('üîß FunctionProcessor: Creating new interpolation context due to invalid existing context');
      interpolationContext = InterpolationContextBuilder.createContext(context, params);
    }
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ ProcessingContext –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    const contextWithInterpolation = {
      ...context,
      interpolationContext
    };
    
    if (typeof result === 'object' && result !== null) {
      if (result.function) {
        const functionName = result.function as string;

        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö) —Ñ—É–Ω–∫—Ü–∏–π
        console.log(`üîç FunctionProcessor: Checking function ${functionName} in registry`);
        console.log(`üîç FunctionProcessor: FunctionRegistry.has(${functionName}):`, FunctionRegistry.has(functionName));
        
        if (FunctionRegistry.has(functionName)) {
          console.log(`üîç FunctionProcessor: Found function ${functionName} in registry, executing...`);
          const func = FunctionRegistry.get(functionName)!;
          const combinedParams = { ...result, ...params };
          console.log(`üîç FunctionProcessor: Combined params for ${functionName}:`, combinedParams);
          
          // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
          const interpolatedParams = InterpolationSystem.interpolateAndClean(combinedParams, interpolationContext);
          console.log(`üîç FunctionProcessor: Interpolated params for ${functionName}:`, interpolatedParams);
          
          // –ü–†–ò–ù–¶–ò–ü: –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º interpolationContext
          const functionResult = await func(interpolatedParams, contextWithInterpolation);
          console.log(`üîç FunctionProcessor: Function ${functionName} result:`, functionResult);
          return functionResult;
        } else {
          console.log(`‚ùå FunctionProcessor: Function ${functionName} not found in registry`);
        }

        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, –æ–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        const actionProcessor = contextWithInterpolation.actionProcessor;
        const scenario = actionProcessor?.getScenario();
        if (scenario?.functions && scenario.functions[functionName]) {
          // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ —Ñ—É–Ω–∫—Ü–∏—é
          const interpolatedParams = InterpolationSystem.interpolateAndClean(result, interpolationContext);
          return await this.executeUserFunction(functionName, interpolatedParams, contextWithInterpolation, interpolationContext);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      let interpolated = result;
      
      // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å—Ç—Ä–æ–∫–∞ —Å {{}} –∏–ª–∏ –æ–±—ä–µ–∫—Ç
      if (typeof result === 'string' && result.includes('{{') && result.includes('}}')) {
        interpolated = InterpolationSystem.interpolateAndClean(result, interpolationContext);
      } else if (typeof result === 'object' && result !== null) {
        interpolated = InterpolationSystem.interpolateAndClean(result, interpolationContext);
      }
      
      if (interpolated && typeof interpolated === 'object' && interpolated.action) {
        const actionProcessor = contextWithInterpolation.actionProcessor;
        if (actionProcessor) {
          await actionProcessor.processActions(interpolated, contextWithInterpolation);
        }
        return interpolated;
      }
      
      return interpolated;
    }
    
    return InterpolationSystem.interpolateAndClean(result, interpolationContext);
  }

}