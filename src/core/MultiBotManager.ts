import { TelegramBotConstructor } from '../assembly/TelegramBotConstructor';
import { BotFactory } from '../assembly/BotFactory';
import { FunctionRegistry } from '../registry/FunctionRegistry';
import { ActionRegistry } from '../registry/ActionRegistry';

export interface BotConfig {
  name: string;
  token: string;
  scenarioPath: string;
  enabled?: boolean;
}

export interface MultiBotConfig {
  bots: BotConfig[];
  globalSettings?: {
    sessionTimeout?: number;
    logLevel?: 'debug' | 'info' | 'warn' | 'error';
  };
}

export class MultiBotManager {
  private bots: Map<string, TelegramBotConstructor> = new Map();
  private _config: MultiBotConfig;
  private isInitialized = false;

  constructor(config: MultiBotConfig) {
    this._config = config;
  }

  /**
   * Initializes manager and all bots
   */
  async initialize(): Promise<void> {
    if (this.isInitialized) {
      console.warn('‚ö†Ô∏è MultiBotManager already initialized');
      return;
    }

    console.log('üöÄ Initializing MultiBotManager...');
    
    // Initialize registries (once for all bots)
    FunctionRegistry.initialize();
    ActionRegistry.initialize();

    // Initialize bots
    for (const botConfig of this._config.bots) {
      if (botConfig.enabled !== false) {
        await this.initializeBot(botConfig);
      } else {
        console.log(`‚è∏Ô∏è Bot '${botConfig.name}' is disabled`);
      }
    }

    this.isInitialized = true;
    console.log(`‚úÖ MultiBotManager initialized with ${this.bots.size} bots`);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
   */
  private async initializeBot(botConfig: BotConfig): Promise<void> {
    try {
      console.log(`ü§ñ Initializing bot: ${botConfig.name}`);
      
      // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º –∏ –∏–º–µ–Ω–µ–º
      const bot = await BotFactory.createBotFromFile(botConfig.scenarioPath, botConfig.token, botConfig.name);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞
      this.bots.set(botConfig.name, bot);
      
      console.log(`‚úÖ Bot '${botConfig.name}' initialized successfully`);
      
    } catch (error) {
      console.error(`‚ùå Failed to initialize bot '${botConfig.name}':`, error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤
   */
  async startAll(): Promise<void> {
    if (!this.isInitialized) {
      throw new Error('MultiBotManager not initialized. Call initialize() first.');
    }

    console.log('üöÄ Starting all bots...');
    
    const startPromises = Array.from(this.bots.entries()).map(async ([name, bot]) => {
      try {
        await bot.start();
        console.log(`‚úÖ Bot '${name}' started successfully`);
      } catch (error) {
        console.error(`‚ùå Failed to start bot '${name}':`, error);
        throw error;
      }
    });

    await Promise.all(startPromises);
    console.log('üéâ All bots started successfully');
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤
   */
  async stopAll(): Promise<void> {
    console.log('üõë Stopping all bots...');
    
    const stopPromises = Array.from(this.bots.entries()).map(async ([name, bot]) => {
      try {
        await bot.stop();
        console.log(`‚úÖ Bot '${name}' stopped successfully`);
      } catch (error) {
        console.error(`‚ùå Failed to stop bot '${name}':`, error);
      }
    });

    await Promise.all(stopPromises);
    console.log('‚úÖ All bots stopped');
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
   */
  async startBot(botName: string): Promise<void> {
    const bot = this.bots.get(botName);
    if (!bot) {
      throw new Error(`Bot '${botName}' not found`);
    }

    await bot.start();
    console.log(`‚úÖ Bot '${botName}' started`);
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
   */
  async stopBot(botName: string): Promise<void> {
    const bot = this.bots.get(botName);
    if (!bot) {
      throw new Error(`Bot '${botName}' not found`);
    }

    await bot.stop();
    console.log(`‚úÖ Bot '${botName}' stopped`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –±–æ—Ç–∞—Ö
   */
  getBotsInfo(): Array<{ name: string; status: string; scenarioPath: string }> {
    return Array.from(this.bots.entries()).map(([name, bot]) => ({
      name,
      status: bot.isBotRunning() ? 'running' : 'stopped',
      scenarioPath: this._config.bots.find(b => b.name === name)?.scenarioPath || ''
    }));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
   */
  getBot(botName: string): TelegramBotConstructor | undefined {
    return this.bots.get(botName);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç BotInstance –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
   */
  getBotInstance(botName: string): any {
    const bot = this.bots.get(botName);
    return bot?.getBotInstance?.() || null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä
   */
  isManagerInitialized(): boolean {
    return this.isInitialized;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
   */
  getActiveBotsCount(): number {
    return this.bots.size;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  get config(): MultiBotConfig {
    return this._config;
  }
}
