import { BaseActionProcessor } from './BaseAction';
import { ProcessingContext } from '../types';

export class RequestContactAction extends BaseActionProcessor {
  static readonly actionType = 'RequestContact';

  async process(action: any, context: ProcessingContext): Promise<void> {
    return this.withInterpolationContext(
      context,
      {
        message: action.message,
        status: 'waiting'
      },
      async (interpolationContext) => {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ message —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        const processedMessage = await this.processFieldWithFunctions(
          action.message,
          'message',
          context,
          interpolationContext,
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:'
        );

        // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        const processedAction = { ...action, message: processedMessage };
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ–∫—É—â–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        const interpolatedAction = this.interpolate(processedAction, interpolationContext);
        const { message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:', onSuccess, onFailure } = interpolatedAction;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        interpolationContext.local.setVariable('message', message);
        interpolationContext.local.setVariable('status', 'waiting');

        const userId = context.userContext.userId;
        const chatId = context.userContext.data.telegramData?.chatId || userId;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.userContext.data.awaitingContact = {
          message: message,
          onSuccess: onSuccess,
          onFailure: onFailure,
          timestamp: Date.now()
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if (context.bot && context.bot.api) {
          await context.bot.api.sendMessage(chatId, message, {
            reply_markup: {
              keyboard: [
                [{
                  text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
                  request_contact: true
                }]
              ],
              resize_keyboard: true,
              one_time_keyboard: true
            }
          });
        }

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ

        // Contact request sent successfully
      }
    );
  }
}