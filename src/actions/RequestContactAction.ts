import { BaseActionProcessor } from './BaseAction';
import { ProcessingContext } from '../types';
import { ActionRegistry } from '../registry/ActionRegistry';

export class RequestContactAction extends BaseActionProcessor {
  static readonly actionType = 'RequestContact';

  async process(action: any, context: ProcessingContext): Promise<void> {
    // eslint-disable-next-line no-console
    console.log('RequestContact: Starting process for action:', action);
    return this.withInterpolationContext(
      context,
      {
        message: action.message,
        status: 'waiting'
      },
      async (interpolationContext) => {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ message —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        const processedMessage = await this.processFieldWithFunctions(
          action.message,
          'message',
          context,
          interpolationContext,
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:'
        );

        // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        const processedAction = { ...action, message: processedMessage };
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ–∫—É—â–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        const interpolatedAction = this.interpolate(processedAction, interpolationContext);
        const { message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:', onSuccess, onFailure, successMessage = '‚úÖ' } = interpolatedAction;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        interpolationContext.local.setVariable('message', message);
        interpolationContext.local.setVariable('status', 'waiting');

        const userId = context.userContext.userId;
        const chatId = context.userContext.data.telegramData?.chatId || userId;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.userContext.data.awaitingContact = {
          message: message,
          onSuccess: onSuccess,
          onFailure: onFailure,
          successMessage: successMessage,
          timestamp: Date.now()
        };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
      try {
        const actionProcessor = context.actionProcessor;
        const botConstructor = actionProcessor?.getBotConstructor();
        const adapter = botConstructor?.getAdapter();
        
        if (!adapter) {
          return;
        }
        
        await adapter.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [
              [{
                text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
                request_contact: true
              }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
          }
        });
      } catch (error) {
        console.error('RequestContact: Failed to send message:', error);
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ ActionRegistry (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ActionStateManager)
      const botName = context.actionProcessor?.getBotConstructor()?.getAdapter()?.botName || 'default';
      
      ActionRegistry.setActionWaiting(
        'RequestContact',
        userId,
        botName,
        'contact',
        this.handleContactInput.bind(this, context),
        this.handleContactComplete.bind(this, context),
        { onSuccess, onFailure }
      );

        // Contact request sent successfully
      }
    );
  }

  private async handleContactInput(context: ProcessingContext, input: any, state: any): Promise<boolean> {
    const contact = input.contact;
    if (!contact) {
      // –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º onFailure
      const awaitingContact = context.userContext.data.awaitingContact;
      if (awaitingContact && awaitingContact.onFailure) {
        const onFailureActions = Array.isArray(awaitingContact.onFailure) 
          ? awaitingContact.onFailure 
          : [awaitingContact.onFailure];
        
        for (const actionData of onFailureActions) {
          await context.actionProcessor.processActions(actionData, context);
        }
      }
      return false; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.userContext.data.phone_number = contact.phone_number;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è onSuccess
    const awaitingContact = context.userContext.data.awaitingContact;
    const successMessage = awaitingContact?.successMessage || '‚úÖ';
    
    const chatId = context.userContext.data.telegramData?.chatId || context.userContext.userId;
    try {
      const actionProcessor = context.actionProcessor;
      const botConstructor = actionProcessor?.getBotConstructor();
      const adapter = botConstructor?.getAdapter();
      
      if (adapter) {
        await adapter.sendMessage(chatId, successMessage, {
          reply_markup: {
            remove_keyboard: true
          }
        });
      }
    } catch (error) {
      console.error('RequestContact: Failed to send success message:', error);
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–ª–ª–±–µ–∫ onSuccess
    if (awaitingContact && awaitingContact.onSuccess) {
      const onSuccessActions = Array.isArray(awaitingContact.onSuccess) 
        ? awaitingContact.onSuccess 
        : [awaitingContact.onSuccess];
      
      for (const actionData of onSuccessActions) {
        await context.actionProcessor.processActions(actionData, context);
      }
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    delete context.userContext.data.awaitingContact;
    return false; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
  }

  private async handleContactComplete(context: ProcessingContext, input: any, state: any): Promise<void> {
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    delete context.userContext.data.awaitingContact;
  }
}