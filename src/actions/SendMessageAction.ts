import { BaseActionProcessor } from './BaseAction';
import { ProcessingContext } from '../types';
import { InterpolationEngine } from '../utils/InterpolationEngine';
import { FunctionProcessor } from '../core/FunctionProcessor';
import { ActionMappingService } from '../telegram/ActionMappingService';
import { ActionProcessor } from '../core/ActionProcessor';

export class SendMessageAction extends BaseActionProcessor {
  static readonly actionType = 'SendMessage';
  
  async process(action: any, context: ProcessingContext): Promise<void> {
    const fullContext = this.getFullContext(context);
    const interpolatedAction = InterpolationEngine.interpolateObject(action, fullContext);

    
    const userId = context.userContext.userId;
    let text = interpolatedAction.text;

    // Support for inline functions in text field
    if (text && typeof text === 'object' && (text as any).function) {
      try {
        const evaluated = await FunctionProcessor.evaluateResult(text, {}, context);
        text = String(evaluated ?? '');
      } catch (e) {
        console.error('Failed to evaluate text function:', e);
        text = '‚ùå Error processing message';
      }
    }
    
    // Check that text is not empty
    if (!text || text.trim() === '') {
      console.warn('‚ö†Ô∏è Empty text detected, skipping message send');
      return;
    }
    
    console.log(`[User ${userId}] Sending message:`, text);
    
    const chatId = context.userContext.data.telegramData?.chatId || userId;
    
    try {
      const actionProcessor = context.actionProcessor;
      const botConstructor = actionProcessor?.getBotConstructor();
      const adapter = botConstructor?.getAdapter();
      
      if (!adapter) {
        console.warn('Telegram adapter not available, using fallback');
        this.fallbackMessage(text, interpolatedAction.inlineActions);
        return;
      }
      
      const options: any = {};
      const messageActionIds: string[] = []; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      
      // –î–æ–±–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å inlineActions
      if (interpolatedAction.inlineActions && interpolatedAction.inlineActions.length > 0) {
        options.reply_markup = this.createCompactInlineKeyboard(
          interpolatedAction.inlineActions,
          messageActionIds // –ü–µ—Ä–µ–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID –¥–µ–π—Å—Ç–≤–∏–π
        );
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
      if (!options.parse_mode) {
        options.parse_mode = 'Markdown';
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message: any = null;
      const updateTarget = (context.localContext as any)?.__updateMessage__;
      if (updateTarget && updateTarget.messageId) {
        await adapter.editMessageText(chatId, Number(updateTarget.messageId), text, options);
        message = { message_id: Number(updateTarget.messageId) };
      } else {
        message = await adapter.sendMessage(chatId, text, options);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ actionIds –¥–ª—è –±—É–¥—É—â–µ–π –æ—á–∏—Å—Ç–∫–∏
      if (!updateTarget && message && message.message_id) {
        context.userContext.data.lastMessageId = message.message_id;
        context.userContext.data.lastMessageActionIds = messageActionIds;
      }

      // –ö–æ–ª–ª–±–µ–∫ onSuccess —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ messageId
      if (interpolatedAction.onSuccess && message && message.message_id) {
        const nextContext: ProcessingContext = {
          ...context,
          localContext: {
            ...context.localContext,
            messageId: message.message_id
          }
        };
        await this.processNestedActions(interpolatedAction.onSuccess, nextContext);
      }
      
    } catch (error) {
      console.error(`‚ùå Failed to send message:`, error);
    }
    
    this.updateUserActivity(context);
  }
  
  private createCompactInlineKeyboard(inlineActions: any[], actionIdsStorage: string[]): any {
    const keyboard = [];
    const actionMappingService = ActionMappingService.getInstance();
    
    for (const action of inlineActions) {
      if (action.onClick) {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID
        const actionId = actionMappingService.registerAction(action.onClick);
        actionIdsStorage.push(actionId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –±—É–¥—É—â–µ–π –æ—á–∏—Å—Ç–∫–∏
        
        const button = {
          text: action.title,
          callback_data: actionId
        };
        
        console.log(`üîó Mapped action: ${actionId} for button "${action.title}"`);
        keyboard.push([button]);
      }
    }
    
    return {
      inline_keyboard: keyboard
    };
  }
  
  private createCompactCallbackData(action: any): string {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è callback —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è 64 –±–∞–π—Ç–∞
    if (!action || typeof action !== 'object') {
      return 'default';
    }
    
    // –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    if (action.action === 'Navigate') {
      return `nav:${action.menuItem}:${action.addToBackStack ? '1' : '0'}`;
    }
    
    if (action.action === 'Back') {
      return 'back';
    }
    
    if (action.action === 'SendMessage') {
      // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à —Ç–µ–∫—Å—Ç–∞
      const textHash = this.hashCode(action.text || '').toString(36);
      return `msg:${textHash}`;
    }
    
    // –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º JSON –Ω–æ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤
    const jsonData = JSON.stringify(action);
    if (jsonData.length <= 64) {
      return jsonData;
    }
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à
    return `hash:${this.hashCode(jsonData).toString(36)}`;
  }
  
  private hashCode(str: string): number {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return hash;
  }
  
  private fallbackMessage(text: string, inlineActions?: any[]): void {
    console.log('üì® Fallback message (would send in production):');
    console.log('Text:', text);
    if (inlineActions) {
      console.log('Inline actions:', inlineActions.map(a => a.title));
    }
  }
}