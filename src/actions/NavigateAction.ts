import { BaseActionProcessor } from './BaseAction';
import { ProcessingContext } from '../types';
import { ActionProcessor } from '../core/ActionProcessor';
import { ActionMappingService } from '../telegram/ActionMappingService';

export class NavigateAction extends BaseActionProcessor {
  static readonly actionType = 'Navigate';
  
  async process(action: any, context: ProcessingContext): Promise<void> {
    const { 
      menuItem, 
      addToBackStack = true,
      removePreviousMessage = false,
      uniqueInStack = true 
    } = action;
    

    // –û—á–∏—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (removePreviousMessage) {
      await this.cleanupPreviousActions(context);
      await this.deletePreviousMessages(context);
    }
    
    const isBackAction = context.localContext.isBackAction === true;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
    context.userContext.currentMenu = menuItem;
    this.updateUserActivity(context);

    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–µ–∫ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª —Ç–µ–∫—É—â–µ–º—É –º–µ–Ω—é
    if (addToBackStack && !isBackAction) {
      this.addToBackStack(context, menuItem, uniqueInStack);
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
    const menu = context.scenario.menuItems[menuItem];
    if (!menu) {
      console.warn(`‚ùå Menu item ${menuItem} not found, falling back to start actions`);
      await this.fallbackToStart(context);
      return;
    }
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω—é
    await this.processNestedActions(menu.onNavigation, context);
  }
  
  private async deletePreviousMessages(context: ProcessingContext): Promise<void> {
    const chatId = context.userContext.data.telegramData?.chatId;
    const messageId = context.userContext.data.lastMessageId;
    
    if (!chatId || !messageId) {
      return;
    }
    
    try {
      const actionProcessor = context.actionProcessor;
      const botConstructor = actionProcessor?.getBotConstructor();
      const adapter = botConstructor?.getAdapter();
      
      if (adapter) {
        await adapter.sendMessage(chatId.toString(), 'üóëÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', {});
        delete context.userContext.data.lastMessageId;
      }
    } catch (error) {
      console.error(`‚ùå Failed to delete message ${messageId}:`, error);
    }
  }

  private async cleanupPreviousActions(context: ProcessingContext): Promise<void> {
    const actionIds = context.userContext.data.lastMessageActionIds;
    
    if (actionIds && actionIds.length > 0) {
      console.log(`üßπ Cleaning up ${actionIds.length} previous message actions`);
      const actionMappingService = ActionMappingService.getInstance(); // –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
      actionMappingService.clearMessageActions(actionIds);
      
      // –û—á–∏—â–∞–µ–º storage
      delete context.userContext.data.lastMessageActionIds;
    }
  }
  
  private addToBackStack(context: ProcessingContext, menu: string, unique: boolean): void {
    const stack = context.userContext.backStack;
    const lastItem = stack[stack.length - 1];

    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ‚Äî —É–±–µ—Ä—ë–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –º–µ–Ω—é –≤ —Å—Ç–µ–∫–µ
    if (unique) {
      for (let i = stack.length - 1; i >= 0; i--) {
        if (stack[i] === menu) {
          stack.splice(i, 1);
          break;
        }
      }
    }

    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ —Ç–µ–∫—É—â–∏–π ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
    if (lastItem === menu) {
      console.log(`üîÑ Skip duplicate: ${menu} (already last in stack)`);
    } else {
      stack.push(menu);
      console.log(`‚ûï Added to stack: ${menu}`);
    }
    
    // –õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–µ–∫–∞
    if (stack.length > 20) {
      stack.shift();
    }
    
    console.log(`üìä Stack size: ${stack.length}`);
  }
  
  private async fallbackToStart(context: ProcessingContext): Promise<void> {
    console.log(`üè† Falling back to onStartActions`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –∏ —Å—Ç–µ–∫
    context.userContext.currentMenu = undefined;
    context.userContext.backStack = [];
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º onStartActions
    if (context.scenario.onStartActions) {
      await this.processNestedActions(context.scenario.onStartActions, context);
    } else {
      await this.processNestedActions([
        {
          action: "SendMessage",
          text: "üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
        }
      ], context);
    }
  }
}