import { ProcessingContext } from '../types';
import { InterpolationContextBuilder, InterpolationSystem } from '../interpolation';

declare const console: any;

/**
 * IsNotEmptyFunction - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, null –∏–ª–∏ undefined
 * 
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
 * - value: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º—ã–º –ø–æ–ª–µ–º)
 * 
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 * - true: –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ, –Ω–µ null –∏ –Ω–µ undefined
 * - false: –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, null –∏–ª–∏ undefined
 */
export class IsNotEmptyFunction {
  static async execute(params: any, context: ProcessingContext): Promise<any> {
    // eslint-disable-next-line no-console
    console.log('üîç IsNotEmptyFunction.execute called with params:', params);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    const interpolationContext = InterpolationContextBuilder.createContext(context, params);
    
    if (!params.value) {
      // eslint-disable-next-line no-console
      console.log('‚ùå IsNotEmptyFunction: value parameter missing');
      throw new Error('IsNotEmpty function requires a value parameter');
    }

    // eslint-disable-next-line no-console
    console.log('üîç IsNotEmptyFunction: interpolating value:', params.value);
    
    // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    const value = InterpolationSystem.interpolateAndClean(params.value, interpolationContext);
    
    // eslint-disable-next-line no-console
    console.log('üîç IsNotEmptyFunction: interpolated value:', value, 'type:', typeof value);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ null, undefined
    if (value === null || value === undefined) {
      // eslint-disable-next-line no-console
      console.log('üîç IsNotEmptyFunction: value is null/undefined, returning false');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if (typeof value === 'string' && value.trim() === '') {
      // eslint-disable-next-line no-console
      console.log('üîç IsNotEmptyFunction: value is empty string, returning false');
      return false;
    }
    
    // –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–µ–∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö,
    // –ø–æ—ç—Ç–æ–º—É —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
    
    // eslint-disable-next-line no-console
    console.log('üîç IsNotEmptyFunction: value is not empty, returning true');
    
    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–µ
    return true;
  }
}
